init(){ MSG_REMOVE="\n\nPLEASE REMEMBER TO REMOVE THIS SCRIPT WHEN YOU ARE DONE!\n";MSG_INVALID="Invalid response. Please try again.";NOW=$(date +"%Y.%m.%d.%H%M");EACH_LOC_WP_CONFIG=();EACH_WP_LOC=();EACH_LOC_WP_CONFIG_SORT=();REMOVE_WP_CONFIG=(wp-config.php);EACH_WP_NAME=();EACH_WP_PASS=();EACH_WP_USER=();EACH_WP_HOST=();EACH_WP_PREF=();EACH_WP_OURL=();current_dir=$(pwd)/;Q2CONTINUE=false;};welcomeScreen(){ echo -e "\n\n###################################################\n## Wordpress Compressor Bash Script (WPCBS) v1.0 ##\n###################################################\n\nNOTE: Be sure to chmod +x this file to make it executable\nExample: chmod +x wpcbs.sh$MSG_REMOVE";questionOne;};questionOne(){ while [ "$ANS_CONTINUE" != "y" ]||[ "$ANS_CONTINUE" != "Y" ]||[ "$ANS_CONTINUE" != "n" ]||[ "$ANS_CONTINUE" != "N" ];do read -p "Are you ready to scan everything in this directory? (y/N): " ANS_CONTINUE;if [ "$ANS_CONTINUE" == "y" ]||[ "$ANS_CONTINUE" == "Y" ];then echo -e "\n\nPlease wait...\n";wpConfigSearch;fi;if [ "$ANS_CONTINUE" == "n" ]||[ "$ANS_CONTINUE" == "N" ]||[ -z "$ANS_CONTINUE" ];then echo -e "\nExiting...$MSG_REMOVE";exit;else echo -e "$MSG_INVALID";fi;done;};wpConfigSearch(){ while IFS= read -r -d $'\0';do EACH_LOC_WP_CONFIG+=("$REPLY");done< <(find "$(pwd)" -type f -name "wp-config.php" -print0);IFS=$'\n' EACH_LOC_WP_CONFIG_SORT=($(sort<<<"${EACH_LOC_WP_CONFIG[*]}"));unset IFS;EACH_WP_LOC=("${EACH_LOC_WP_CONFIG_SORT[@]/$REMOVE_WP_CONFIG}");if [ -z "$EACH_WP_LOC" ];then echo -e "\nNo Wordpress installs were found. Please move this script to the root directory of your installs and try again.$MSG_REMOVE";exit;else i=0;for each in "${EACH_WP_LOC[@]}";do EACH_WP_NAME+=("$(grep -oP "DB_NAME'\s*,\s*'\K.+(?=')" $each/wp-config.php)");EACH_WP_PASS+=("$(grep -oP "DB_PASSWORD'\s*,\s*'\K.+(?=')" $each/wp-config.php)");EACH_WP_USER+=("$(grep -oP "DB_USER'\s*,\s*'\K.+(?=')" $each/wp-config.php)");EACH_WP_HOST+=("$(grep -oP "DB_HOST'\s*,\s*'\K.+(?=')" $each/wp-config.php)");EACH_WP_PREF+=("$(grep -oP "[\$]table_prefix\s*=\s*'\K.*(?=')" $each/wp-config.php)");EACH_WP_OURL+=("$(mysql -N -B -h${EACH_WP_HOST[$i]} -u${EACH_WP_USER[$i]} -p${EACH_WP_PASS[$i]} -e"SELECT option_value FROM ${EACH_WP_PREF[$i]}options WHERE option_name='siteurl';" ${EACH_WP_NAME[$i]}|sed -e 's/https*:\/\///g;s/\/$//g')");((i=i+1));done;echo -e "Here are the locations of all the Wordpress installs found:\n";thisnum=1;for each in "${EACH_WP_OURL[@]}";do echo $thisnum: $each;((thisnum=thisnum+1));done;questionTwo;fi;};questionTwo(){ while [ "$ANS_INSTALLS" != 0 ]&&[ "$Q2CONTINUE" == false ];do echo -e "\nWhich installs would you like to backup?";read -p "(Enter number(s) seperated by commas (,) or press 0 for ALL): " ANS_INSTALLS;if [[ $ANS_INSTALLS =~ ^[0-9\,]*$ ]];then if [[ $ANS_INSTALLS =~ ^[0-9] ]]&&[[ $ANS_INSTALLS =~ [0-9]$ ]];then if [[ $ANS_INSTALLS =~ \,\, ]];then echo -e "$MSG_INVALID Answer can only have single commas.";else ANS_INS_ARRAY=(${ANS_INSTALLS//,/ });ANS_EXISTS=true;for i in "${ANS_INS_ARRAY[@]}";do((i=i-1));if [ -z "${EACH_WP_LOC[$i]}" ];then ANS_EXISTS=false;fi;done;if [ "$ANS_EXISTS" == false ];then Q2CONTINUE=false;echo -e "$MSG_INVALID Answer does not exist as an option.";else Q2CONTINUE=true;fi;fi;else echo -e "$MSG_INVALID Answer can only begin and end with a number.";fi;else echo -e "$MSG_INVALID Answer can only contain numbers or commas.";fi;done;wpRemoveSlashes;questionThree;};questionThree(){ while [ -z "$APPROVED_LOCATION" ];do echo -e "\nWhere would you like to store the backups?";read -p "(Enter absolute path with trailing slash (/), or ENTER for $current_dir ): " ANS_LOCATION;if [ -z "$ANS_LOCATION" ];then ANS_LOCATION=$current_dir;fi;if [[ "$ANS_LOCATION" != \/* ]]||[[ "$ANS_LOCATION" != *\/ ]];then echo -e "Your path needs to begin and end with a forward slash (/)";else if [ -w "$ANS_LOCATION" ];then BAD_DIR=false;if [ "$ANS_INSTALLS" == 0 ];then for each in "${EACH_WP_LOC[@]}";do if [ "$each" == "$ANS_LOCATION" ];then BAD_DIR=true;fi;done;else for each in "${ANS_INS_ARRAY[@]}";do((each=each-1));if [ "${EACH_WP_LOC[$each]}" == "$ANS_LOCATION" ];then BAD_DIR=true;fi;done;fi;if [ "$BAD_DIR" == true ];then echo -e "The directory cannot equal the website root directory. Please create a directory to compress to.";else APPROVED_LOCATION=$ANS_LOCATION;fi;else echo -e "The location: $ANS_LOCATION in not writeable.\n";fi;fi;done;wpCompressor;};wpRemoveSlashes(){ i=0;for each in "${EACH_WP_LOC[@]}";do EACH_WP_OURL[i]=${EACH_WP_OURL[i]//\//.};((i=i+1));done;};wpCompressor(){ echo -e "\n\nPlease wait...";if [ "$ANS_INS_ARRAY" -eq 0 ];then ii=0;for i in "${EACH_WP_LOC[@]}";do echo -e "\nCompressing: "${APPROVED_LOCATION}_${EACH_WP_OURL[$ii]}.${NOW}.bak.tgz;mysqldump -h${EACH_WP_HOST[$ii]} -u${EACH_WP_USER[$ii]} -p${EACH_WP_PASS[$ii]} ${EACH_WP_NAME[$ii]}>${EACH_WP_LOC[$ii]}db.sql;tar -czf ${APPROVED_LOCATION}_${EACH_WP_OURL[$ii]}.${NOW}.bak.tgz -C ${EACH_WP_LOC[$ii]} .;rm -rf "${EACH_WP_LOC[$ii]}"db.sql;((ii=ii+1));done;else for i in "${ANS_INS_ARRAY[@]}";do((i=i-1));echo -e "\nCompressing: "${APPROVED_LOCATION}_${EACH_WP_OURL[$i]}.${NOW}.bak.tgz;mysqldump -h${EACH_WP_HOST[$i]} -u${EACH_WP_USER[$i]} -p${EACH_WP_PASS[$i]} ${EACH_WP_NAME[$i]}>${EACH_WP_LOC[$i]}db.sql;tar -czf ${APPROVED_LOCATION}_${EACH_WP_OURL[$i]}.${NOW}.bak.tgz -C ${EACH_WP_LOC[$i]} .;rm -rf "${EACH_WP_LOC[$i]}"db.sql;done;fi;echo -e "\nCompleted Successfully!$MSG_REMOVE";exit;};init;welcomeScreen
